#line 2 "src/scanner/lex.cpp"

#line 4 "src/scanner/lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[540] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   38,   38,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,   46,   50,   50,  160,  158,  157,  157,  145,  158,
      151,  144,  158,  139,  140,  149,  148,  136,  147,  143,
      150,  102,  101,  137,  133,  152,  138,  153,  156,   99,
       99,  141,  142,  154,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      134,  155,  135,  146,    1,   10,   11,  159,  159,  159,
      159,   13,   14,   15,   16,   17,   19,   23,   21,   23,

       22,   27,   27,   27,   25,   24,   40,   38,   38,   39,
       42,   43,   45,   44,   41,   28,   29,   30,   31,   35,
       36,  159,   49,   46,   48,   47,   50,   51,  159,  157,
      132,    0,  110,    0,  118,  135,  127,  119,    0,    0,
      116,  124,  114,  125,  115,  126,    0,  105,   52,   53,
      117,  106,  102,    0,    0,  102,  102,    0,  102,  101,
      101,  101,  101,  142,  134,  141,  123,  129,  131,  130,
      122,   99,    0,    0,  120,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       61,   99,   99,   99,   99,   99,   99,   69,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
      121,  128,    1,   10,    0,    0,    0,    0,    0,    0,
       12,   13,   14,   16,    0,   18,   21,    0,   20,   22,
        0,    0,   25,   26,   25,   24,   38,   41,   29,   30,
        0,    0,    0,    0,   46,   50,    0,  110,    0,    0,
        0,    0,  103,    0,    0,  111,    0,  105,   53,    0,
      106,    0,  104,  102,  102,  102,  102,    0,  100,  101,
      101,  101,  101,  113,  112,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   67,   99,   99,   71,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,    0,    0,    0,    0,
        5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  105,    0,  106,  104,  102,    0,    0,  100,
        0,  100,  100,  101,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   54,   99,   56,   57,   99,   99,
       99,   99,   63,   64,   99,   99,   68,   99,   72,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   85,   99,   99,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      100,  100,    0,  107,  100,  100,   99,   99,   91,   99,
       99,   99,   99,   99,   99,   99,   55,   58,   99,   99,
       99,   99,   66,   99,   99,   99,   99,   76,   99,   99,
       99,   99,   99,   99,   83,   99,   99,   87,    0,    8,
        4,    0,    0,    0,   32,    0,    0,    0,    0,  108,
        0,  109,  107,  100,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   62,   65,   70,   99,   99,
       75,   77,   78,   79,   80,   81,   99,   99,   99,    0,
        6,    0,    0,   33,   34,   37,  108,  109,   99,   99,
       90,   99,   99,   99,   99,   99,   99,   99,   99,   60,

       99,   99,   82,   99,   99,    3,    7,    0,   88,   89,
       92,   93,   99,   99,   99,   99,   98,   59,   73,   74,
       84,   86,    0,    2,   99,   95,   99,   99,   94,   99,
       99,   99,   99,   99,   99,   99,   97,   96,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   36,   36,   38,   36,   39,   36,   40,
       36,   36,   41,   42,   43,   36,   36,   44,   36,   36,
       45,   46,   47,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   36,   59,   60,   61,   62,
       63,   64,   36,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[78] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    1,    5,
        6,    1,    1,    1,    1,    1,    7,    1,    8,    8,
        9,    9,    1,    1,    1,    1,    2,   10,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    1,   12,    1,    1,   11,    8,
        8,    9,    9,    9,    8,   11,   11,   11,   11,   11,
       11,   13,   11,   11,   13,   11,   13,   11,   13,   11,
       13,   11,   11,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[568] =
    {   0,
        0, 1504,   76,   78,   32,   34,  105,    0,   91,   93,
      180,  181,  227,    0,  304,    0,  183,  185,  381,    0,
     1507, 1506,  458,    0,  535,    0, 1501, 1500, 1499, 1498,
       95,  187,  607,  608, 1504, 1512,  195,  198, 1477,  609,
       73,  182, 1456, 1512, 1512, 1475,  178, 1512,  179,  190,
      603,  639,  603, 1473, 1512,  195, 1473,  187, 1512,    0,
      209, 1512, 1512, 1472,  603, 1429, 1431,  580,  162,  557,
      587, 1432,  162, 1431, 1439,  608, 1420,  658, 1428, 1433,
     1512,  592, 1512, 1512, 1487,    0, 1512, 1512, 1434,  624,
      607, 1476, 1484, 1512,    0, 1512,  220, 1512,  637, 1483,

        0, 1512,  679, 1482, 1481,    0, 1512,  624,  671, 1512,
     1512, 1512, 1512, 1512,    0, 1512,    0,    0, 1512,  633,
     1512,  646, 1512, 1480, 1512, 1512, 1435, 1512,  682,  693,
     1512,  670,  699,  689, 1512, 1512, 1512, 1512,  660,  692,
     1512, 1512, 1512, 1512, 1512, 1512, 1463,  702, 1512,    0,
     1512,  710,  733,  758,  776,  690,  654, 1462,  691,  783,
      731,  666,  746, 1512, 1512, 1512, 1452, 1512, 1512, 1512,
     1451,    0,  692, 1430, 1512,  658, 1412, 1411, 1419, 1411,
     1408, 1403, 1412, 1413, 1400, 1412, 1399, 1414, 1401, 1407,
     1393, 1394, 1391, 1391, 1394, 1391, 1388,    0,  679, 1392,

      716, 1390,  712,   39, 1394, 1387, 1444,   25,  655, 1391,
     1512, 1512, 1446,    0, 1392, 1380, 1392, 1379,  771, 1391,
     1512, 1431, 1439,    0,  805, 1512,  678, 1438, 1437,    0,
      807, 1436, 1435, 1434, 1433,    0,  808,    0,    0,    0,
      759,  657,  782, 1372, 1431, 1386,  812,  825, 1425,  811,
      819,    0, 1512,  825,    0, 1512,  833, 1512,    0,  853,
     1512,  837,  857,  780, 1512, 1392, 1369,    0,  843,  798,
     1512, 1390, 1367, 1512, 1512, 1368, 1362, 1361, 1362, 1360,
     1371, 1355, 1369, 1353, 1349, 1353, 1365, 1360, 1348,  795,
     1362, 1360, 1356, 1348, 1354, 1357,    0, 1343, 1347,    0,

     1348, 1345, 1335, 1333, 1335, 1337, 1344, 1330, 1328, 1328,
     1340, 1330, 1334, 1338, 1340, 1329, 1330, 1333, 1328, 1322,
     1382, 1329, 1329, 1321, 1314, 1326, 1325,  878,  919,  870,
      965,  880,  899,  907,  923, 1512, 1512,  800,  806,  866,
      986,  689,  845, 1512, 1302, 1292, 1291, 1285, 1294, 1287,
     1287, 1272, 1284, 1264,    0, 1262,    0,    0, 1252, 1257,
     1245, 1249,    0,    0, 1242, 1236,    0, 1239,    0, 1231,
     1230, 1226, 1215, 1224, 1213, 1215, 1210, 1209, 1207, 1195,
     1199,    0, 1177, 1188, 1167, 1512, 1053, 1042, 1051, 1051,
     1035,  687, 1044, 1043,  788,    0,  877,    0, 1007, 1016,

      842, 1512,  960, 1020, 1062, 1039, 1036, 1039,    0, 1036,
     1030, 1036, 1026, 1034, 1041, 1038,    0,    0, 1027, 1028,
     1031, 1022,    0, 1028, 1012, 1020, 1015,    0, 1023, 1019,
     1021, 1005, 1010, 1012,    0, 1003, 1005,    0, 1008, 1512,
     1512, 1059, 1004, 1004, 1512, 1001, 1000,  998,  969, 1026,
     1030, 1049, 1512, 1512,  872,  992,  989,  976,  971,  963,
      973,  971,  973,  946,  946,    0,    0,    0,  958,  958,
        0,    0,    0,    0,    0,    0,  954,  950,  943,  999,
      991,  990,  923, 1512, 1512, 1512, 1512, 1512,  910,  913,
        0,  896,  914,  914,  898,  913,  911,  909,  902,    0,

      882,  879,    0,  878,  876,  912,  906,  890,    0,    0,
        0,    0,  841,  832,  832,  790,    0,    0,    0,    0,
        0,    0,  930, 1512,  770,    0,  764,  757,    0,  722,
      734,  727,  697,  586,  571,   35,    0,    0, 1512, 1109,
     1122, 1135, 1148, 1161, 1174, 1187, 1200, 1213, 1226, 1239,
     1245, 1258, 1266, 1279, 1285, 1291, 1297, 1303, 1309, 1322,
     1332, 1342, 1355, 1362, 1364, 1366, 1368
    } ;

static yyconst flex_int16_t yy_def[568] =
    {   0,
      539,    1,  540,  540,  541,  541,  539,    7,  541,  541,
      542,  542,  539,   13,  539,   15,  543,  543,  539,   19,
      544,  544,  539,   23,  539,   25,  545,  545,  546,  546,
      547,  547,  548,  548,  539,  539,  539,  539,  539,  549,
      539,  539,  550,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  551,
      551,  539,  539,  539,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      539,  539,  539,  539,  539,  552,  539,  539,  539,  539,
      539,  553,  539,  539,  554,  539,  539,  539,  539,  539,

      555,  539,  539,  539,  539,  556,  539,  539,  539,  539,
      539,  539,  539,  539,  557,  539,  558,  559,  539,  539,
      539,  539,  539,  539,  539,  539,  560,  539,  560,  539,
      539,  549,  539,  561,  539,  539,  539,  539,  550,  562,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  563,
      539,  539,  539,  539,  539,  539,  539,  564,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  551,  549,  550,  539,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      539,  539,  539,  552,  539,  539,  539,  539,  539,  539,
      539,  553,  539,  554,  539,  539,  539,  539,  539,  555,
      539,  539,  539,  539,  539,  556,  539,  557,  558,  559,
      539,  539,  539,  539,  539,  560,  560,  539,  539,  539,
      549,  565,  539,  550,  566,  539,  539,  539,  563,  539,
      539,  539,  539,  539,  539,  539,  539,  567,  564,  539,
      539,  539,  539,  539,  539,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  549,  549,  550,
      550,  539,  539,  539,  539,  539,  539,  567,  567,  539,
      539,  539,  539,  539,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  549,  329,  550,  331,  539,  539,

      539,  539,  539,  539,  539,  539,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  539,  539,  539,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  539,  539,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,    0,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539
    } ;

static yyconst flex_uint16_t yy_nxt[1590] =
    {   0,
       36,   37,   38,   37,   39,   40,   36,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       53,   53,   54,   55,   56,   57,   58,   59,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   61,   60,   60,
       60,   60,   61,   60,   62,   36,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   60,   73,   60,   74,
       60,   60,   60,   60,   75,   76,   77,   78,   79,   80,
       60,   60,   60,   81,   82,   83,   84,   87,   87,   87,
       87,   87,  312,   87,   89,   90,   89,   90,  308,   91,
      313,   91,   93,   94,   93,   94,  124,  125,  135,  136,

      126,  538,   87,  309,   87,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   88,
       88,   88,   88,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   88,   88,
       88,   88,   96,   96,  108,  109,  108,  109,  124,  125,
      137,  142,  126,  110,  144,  110,  130,  130,  130,  130,

      130,  130,  165,  143,  145,  146,  147,  138,  148,  148,
      148,  148,  170,  171,  173,  190,  198,  166,  174,  167,
      168,  225,  226,  199,  191,   97,   97,   98,   99,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  100,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,   98,   98,   98,   98,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

       98,   98,   98,   98,  102,  103,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  104,  102,  102,  105,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  102,  102,
      102,  102,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  102,  102,  102,
      102,  111,  111,  111,  111,  111,   88,  111,  111,  111,
      111,  112,  113,  111,  111,  114,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  111,  111,  111,  111,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  111,  111,  111,  111,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,   88,   88,   88,   88,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   88,
       88,   88,   88,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,   88,   88,
       88,   88,  128,  128,  133,  149,  192,  211,  193,  152,
      150,  160,  160,  160,  160,  237,  237,  194,  151,  187,
      537,  176,  177,  178,  241,  155,  188,  179,  227,  180,
      161,  181,  189,  182,  183,  162,  195,  243,  228,  196,
      536,  184,  129,  129,  134,  152,  155,  153,  153,  154,
      154,  219,  163,  173,  202,  203,  212,  174,  220,  253,
      162,  155,  237,  237,  204,  133,  156,  205,  207,  227,
      231,  157,  158,  216,  539,  217,  242,  246,  218,  228,
      232,  266,  155,  233,  130,  130,  130,  133,  159,  244,

      248,  248,  248,  272,  173,  140,  157,  251,  251,  158,
      254,  254,  314,  267,  315,  134,  325,  276,  326,  208,
      148,  148,  148,  148,  277,  273,  405,  264,  148,  148,
      148,  148,  265,  265,  257,  258,  249,  134,  299,  258,
      445,  249,  260,  261,  446,  300,  535,  261,  406,  152,
      264,  153,  153,  154,  154,  257,  258,  265,  265,  252,
      241,  258,  255,  260,  261,  155,  250,  306,  270,  261,
      156,  302,  321,  271,  152,  157,  154,  154,  154,  154,
      534,  303,  304,  243,  307,  533,  155,  532,  271,  262,
      155,  262,  159,  133,  263,  263,  263,  263,  271,  152,

      157,  160,  160,  160,  160,  270,  225,  226,  231,  237,
      237,  155,  242,  271,  539,  155,  173,  246,  232,  531,
      161,  233,  265,  322,  133,  162,  248,  248,  248,  530,
      173,  249,  323,  134,  253,  244,  155,  328,  328,  399,
      271,  529,  163,  330,  330,  400,  332,  265,  332,  528,
      162,  333,  333,  333,  333,  263,  263,  263,  263,  339,
      359,  360,  249,  399,  134,  271,  334,  249,  334,  400,
      140,  335,  335,  335,  335,  263,  263,  263,  263,  253,
      340,  527,  341,  133,  402,  342,  253,  402,  397,  397,
      336,  523,  250,  526,  336,  524,  395,  395,  333,  333,

      333,  333,  343,  401,  401,  525,  341,  507,  402,  402,
      342,  336,  402,  506,  524,  140,  336,  333,  333,  333,
      333,  489,  140,  134,  133,  335,  335,  335,  335,  522,
      521,  523,  258,  402,  490,  524,  258,  396,  396,  396,
      396,  335,  335,  335,  335,  520,  519,  396,  396,  396,
      396,  396,  396,  258,  524,  518,  261,  517,  258,  516,
      261,  515,  514,  513,  134,  512,  511,  510,  396,  396,
      396,  396,  396,  396,  253,  509,  508,  261,  404,  404,
      404,  404,  261,  398,  398,  398,  398,  450,  450,  450,
      450,  507,  481,  398,  398,  398,  398,  398,  398,  403,

      506,  403,  505,  504,  404,  404,  404,  404,  503,  502,
      140,  501,  500,  499,  398,  398,  398,  398,  398,  398,
      449,  498,  449,  497,  496,  450,  450,  450,  450,  451,
      495,  451,  494,  493,  452,  452,  452,  452,  404,  404,
      404,  404,  492,  491,  450,  450,  450,  450,  452,  452,
      452,  452,  486,  453,  485,  484,  483,  453,  482,  487,
      481,  480,  479,  487,  478,  477,  476,  452,  452,  452,
      452,  475,  474,  473,  453,  472,  471,  470,  469,  453,
      487,  468,  488,  467,  466,  487,  488,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  454,

      448,  447,  444,  488,  443,  442,  441,  440,  488,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  132,  132,  439,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  139,
      139,  438,  139,  437,  139,  139,  139,  139,  139,  139,
      139,  139,  172,  172,  436,  172,  435,  172,  214,  434,
      433,  432,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  222,  431,  222,  222,  430,  222,  429,  222,  224,
      224,  428,  224,  224,  224,  224,  224,  224,  224,  224,
      427,  224,  230,  230,  426,  230,  425,  230,  236,  236,

      424,  236,  423,  236,  238,  238,  422,  238,  421,  238,
      239,  239,  420,  239,  419,  239,  240,  240,  418,  240,
      417,  240,  246,  246,  246,  416,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  132,  132,  415,  414,  132,
      413,  132,  412,  132,  132,  139,  139,  411,  410,  139,
      409,  139,  408,  139,  139,  259,  259,  407,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  269,  269,
      269,  329,  329,  331,  331,  338,  338,  394,  393,  392,
      391,  390,  389,  321,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,

      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  344,  337,  337,
      173,  247,  245,  327,  235,  234,  235,  234,  229,  229,
      223,  221,  324,  320,  319,  318,  317,  213,  316,  173,
      311,  310,  305,  301,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  140,  275,  274,  268,  256,
      247,  245,  235,  234,  229,  223,  221,  215,  213,  210,
      209,  206,  201,  200,  197,  186,  185,  175,  169,  164,

      141,  140,  131,  539,  122,  122,  120,  120,   88,   88,
       85,   35,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539
    } ;

static yyconst flex_int16_t yy_chk[1590] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    3,  208,    4,    5,    5,    6,    6,  204,    5,
      208,    6,    9,    9,   10,   10,   31,   31,   41,   41,

       31,  536,    3,  204,    4,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   11,   12,   17,   17,   18,   18,   32,   32,
       42,   47,   32,   17,   49,   18,   37,   37,   37,   38,

       38,   38,   56,   47,   49,   49,   50,   42,   50,   50,
       50,   50,   58,   58,   61,   69,   73,   56,   61,   56,
       56,   97,   97,   73,   69,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   33,   34,   40,   51,   70,   82,   70,   53,
       51,   53,   53,   53,   53,  108,  108,   70,   51,   68,
      535,   65,   65,   65,  120,   53,   68,   65,   99,   65,
       53,   65,   68,   65,   65,   53,   71,  122,   99,   71,
      534,   65,   33,   34,   40,   52,   53,   52,   52,   52,
       52,   91,   53,   78,   76,   76,   82,   78,   91,  139,
       53,   52,  109,  109,   76,  132,   52,   76,   78,  227,
      103,   52,   52,   90,  129,   90,  120,  129,   90,  227,
      103,  157,   52,  103,  130,  130,  130,  173,   52,  122,

      133,  133,  133,  162,  133,  139,   52,  134,  134,   52,
      140,  140,  209,  157,  209,  132,  242,  176,  242,   78,
      148,  148,  148,  148,  176,  162,  342,  156,  152,  152,
      152,  152,  156,  159,  148,  148,  133,  173,  199,  148,
      392,  133,  152,  152,  392,  199,  533,  152,  342,  153,
      159,  153,  153,  153,  153,  148,  148,  156,  159,  134,
      241,  148,  140,  152,  152,  153,  133,  203,  161,  152,
      153,  201,  219,  161,  154,  153,  154,  154,  154,  154,
      532,  201,  201,  243,  203,  531,  153,  530,  163,  155,
      154,  155,  153,  395,  155,  155,  155,  155,  161,  160,

      153,  160,  160,  160,  160,  163,  225,  225,  231,  237,
      237,  154,  241,  163,  247,  160,  250,  247,  231,  528,
      160,  231,  264,  219,  251,  160,  248,  248,  248,  527,
      248,  250,  219,  395,  254,  243,  160,  251,  251,  338,
      270,  525,  160,  254,  254,  339,  257,  264,  257,  516,
      160,  257,  257,  257,  257,  262,  262,  262,  262,  269,
      290,  290,  248,  338,  251,  270,  260,  248,  260,  339,
      254,  260,  260,  260,  260,  263,  263,  263,  263,  330,
      269,  515,  269,  328,  401,  269,  397,  343,  330,  330,
      263,  508,  248,  514,  263,  508,  328,  328,  332,  332,

      332,  332,  269,  340,  343,  513,  269,  507,  340,  401,
      269,  263,  343,  506,  508,  330,  263,  333,  333,  333,
      333,  455,  397,  328,  329,  334,  334,  334,  334,  505,
      504,  523,  333,  340,  455,  523,  333,  329,  329,  329,
      329,  335,  335,  335,  335,  502,  501,  329,  329,  329,
      329,  329,  329,  333,  523,  499,  335,  498,  333,  497,
      335,  496,  495,  494,  329,  493,  492,  490,  329,  329,
      329,  329,  329,  329,  331,  489,  483,  335,  403,  403,
      403,  403,  335,  331,  331,  331,  331,  449,  449,  449,
      449,  482,  481,  331,  331,  331,  331,  331,  331,  341,

      480,  341,  479,  478,  341,  341,  341,  341,  477,  470,
      331,  469,  465,  464,  331,  331,  331,  331,  331,  331,
      399,  463,  399,  462,  461,  399,  399,  399,  399,  400,
      460,  400,  459,  458,  400,  400,  400,  400,  404,  404,
      404,  404,  457,  456,  450,  450,  450,  450,  451,  451,
      451,  451,  448,  404,  447,  446,  444,  404,  443,  450,
      442,  439,  437,  450,  436,  434,  433,  452,  452,  452,
      452,  432,  431,  430,  404,  429,  427,  426,  425,  404,
      450,  424,  452,  422,  421,  450,  452,  420,  419,  416,
      415,  414,  413,  412,  411,  410,  408,  407,  406,  405,

      394,  393,  391,  452,  390,  389,  388,  387,  452,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  549,  549,  385,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  550,
      550,  384,  550,  383,  550,  550,  550,  550,  550,  550,
      550,  550,  551,  551,  381,  551,  380,  551,  552,  379,
      378,  377,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  553,  376,  553,  553,  375,  553,  374,  553,  554,
      554,  373,  554,  554,  554,  554,  554,  554,  554,  554,
      372,  554,  555,  555,  371,  555,  370,  555,  556,  556,

      368,  556,  366,  556,  557,  557,  365,  557,  362,  557,
      558,  558,  361,  558,  360,  558,  559,  559,  359,  559,
      356,  559,  560,  560,  560,  354,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  561,  561,  353,  352,  561,
      351,  561,  350,  561,  561,  562,  562,  349,  348,  562,
      347,  562,  346,  562,  562,  563,  563,  345,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  564,  564,
      564,  565,  565,  566,  566,  567,  567,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,

      304,  303,  302,  301,  299,  298,  296,  295,  294,  293,
      292,  291,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  273,  272,  267,  266,
      249,  246,  245,  244,  235,  234,  233,  232,  229,  228,
      223,  222,  220,  218,  217,  216,  215,  213,  210,  207,
      206,  205,  202,  200,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  179,  178,  177,  174,  171,  167,  158,  147,
      127,  124,  105,  104,  100,   93,   92,   89,   85,   80,
       79,   77,   75,   74,   72,   67,   66,   64,   57,   54,

       46,   43,   39,   35,   30,   29,   28,   27,   22,   21,
        2,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[160] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/scanner/lexc11.l"
#line 2 "src/scanner/lexc11.l"
#include <string>
using std::string;

#include <stdio.h>
#include <string.h>

#include "../parser/yy_parser.h"
#include "preprocessor.h"

//int yylineno;

struct bufstack {
   struct bufstack *prev; // previous entry
   YY_BUFFER_STATE bs;    // saved buffer
   int lineno;            // saved line number
   char *filename;        // name of this file
   char *path;            // path of this file
   FILE *f;               // current file
   deftab *deffunctable;
} *curbs = 0;

char *curfilename;   // name of current input file

deftab defs;

int newfile(char *fn);
int popfile(void);
int scanstring(const char *str);

void count();
//void comment();
//int check_type();
int check_def();

char * lexeme();

#line 41 "src/scanner/lexc11.l"

extern void yyerror(const char *);  /* prints grammar violation message */

extern int sym_type(const char *);  /* returns type from symbol table */

#define sym_type(identifier) IDENTIFIER /* with no symbol table, fake it */

static void comment(void);
static int check_type(void);


 









#line 1093 "src/scanner/lex.cpp"

#define INITIAL 0
#define IFILE 1
#define MACRO 2
#define DEFINE 3
#define DEFVAR 4
#define DEFVARVAL 5
#define DEFFUNC 6
#define DEFFUNCPARAM 7
#define ACTDEFFUNC 8
#define ACTPARAMDEFFUNC 9
#define MACROIF 10
#define MACROIFDEF 11
#define MACROIFNDEF 12
#define IGNOREIF 13
#define IGNOREELSE 14
#define MACROERROR 15
#define MACROERRORSTRING 16

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 90 "src/scanner/lexc11.l"


#line 1333 "src/scanner/lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 540 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1512 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "src/scanner/lexc11.l"
{ BEGIN(MACRO); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 93 "src/scanner/lexc11.l"
{ BEGIN(IFILE); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "src/scanner/lexc11.l"
{ startdef(); BEGIN(DEFINE); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "src/scanner/lexc11.l"
{ BEGIN(MACROERROR); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "src/scanner/lexc11.l"
{ BEGIN(MACROIF); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 97 "src/scanner/lexc11.l"
{ BEGIN(MACROIFDEF); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 98 "src/scanner/lexc11.l"
{ BEGIN(MACROIFNDEF); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 99 "src/scanner/lexc11.l"
{ /*decrement a counter, if counter 0, error */ BEGIN(INITIAL); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "src/scanner/lexc11.l"
{ /*if counter 0, error */ BEGIN(IGNOREELSE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "src/scanner/lexc11.l"
{
	{int c;
         while((c=yyinput()) && c!='\n');
        }
        yylineno++;
        if(!newfile(yytext))
            yyterminate(); //no such file
        BEGIN(INITIAL);
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 112 "src/scanner/lexc11.l"
{ fprintf(stderr, "%4d bad include line\n", yylineno); yyterminate(); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 114 "src/scanner/lexc11.l"
{ yytext[yyleng-1] = '\0'; setdefid(yytext); define = new deffunc(defid); BEGIN(DEFFUNC); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 115 "src/scanner/lexc11.l"
{ setdefid(yytext); define = new defvar(defid); BEGIN(DEFVAR); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 117 "src/scanner/lexc11.l"
{ BEGIN(DEFVARVAL); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 118 "src/scanner/lexc11.l"
{ define->val(defval); deftable.insert(define); finishdef(); printdef(); BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "src/scanner/lexc11.l"
{ appenddefval(yytext); BEGIN(DEFVARVAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 120 "src/scanner/lexc11.l"
{ define->val(defval); deftable.insert(define); finishdef(); printdef(); BEGIN(INITIAL); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 121 "src/scanner/lexc11.l"
{ appenddefval("\n"); BEGIN(DEFVARVAL); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 122 "src/scanner/lexc11.l"
{ /* error */ yyterminate(); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 124 "src/scanner/lexc11.l"
{ BEGIN(DEFVARVAL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 125 "src/scanner/lexc11.l"
{ BEGIN(DEFFUNCPARAM); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 126 "src/scanner/lexc11.l"
{ ((deffunc *)define)->insertparam(yytext); BEGIN(DEFFUNCPARAM); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 127 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 129 "src/scanner/lexc11.l"
{ ((deffunc *)define)->insertparam(yytext); BEGIN(DEFFUNCPARAM); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 130 "src/scanner/lexc11.l"
{ BEGIN(DEFFUNCPARAM); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "src/scanner/lexc11.l"
{ BEGIN(DEFVARVAL); }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 132 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 134 "src/scanner/lexc11.l"
{ /* evaluate(yytext); */ }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 135 "src/scanner/lexc11.l"
{ if( deftable.contains(yytext) ) { /*increment a counter*/ BEGIN(INITIAL); } else BEGIN(IGNOREIF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 136 "src/scanner/lexc11.l"
{ if( !deftable.contains(yytext) ){ /*increment a counter*/ BEGIN(INITIAL); } else BEGIN(IGNOREIF); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 138 "src/scanner/lexc11.l"
{}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "src/scanner/lexc11.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "src/scanner/lexc11.l"
{ BEGIN(MACROIF); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "src/scanner/lexc11.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "src/scanner/lexc11.l"
{}
	YY_BREAK
case YY_STATE_EOF(IGNOREIF):
#line 143 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 145 "src/scanner/lexc11.l"
{}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "src/scanner/lexc11.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(IGNOREELSE):
#line 147 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 149 "src/scanner/lexc11.l"
{ }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "src/scanner/lexc11.l"
{ defactpidx = 0; startdef(); define = new defvar(deff->getparam(defactpidx)); BEGIN(ACTPARAMDEFFUNC);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case YY_STATE_EOF(ACTDEFFUNC):
#line 152 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "src/scanner/lexc11.l"
{ 
   if(curbs->deffunctable){
      def *d = curbs->deffunctable->get(yytext);
      if(d) {
         appenddefval(d->val());
      } else appenddefval(yytext);
   }else appenddefval(yytext);
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 162 "src/scanner/lexc11.l"
{ appenddefval(yytext); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 163 "src/scanner/lexc11.l"
{ definb++;  appenddefval(yytext); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 164 "src/scanner/lexc11.l"
{
   if(definb>0){
      appenddefval(yytext);
   }else {
      define->val(defval);
      deffunctable->insert(define);
      finishdef();
      /* printdef(); */
      defactpidx++;
      if(defactpidx==deff->totalparams()){
         /*error*/ yyterminate();
      }else{
         startdef();
         define = new defvar(deff->getparam(defactpidx));
      }
   }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "src/scanner/lexc11.l"
{
   if((--definb)<0){
      if( (defactpidx+1)==deff->totalparams() ){
         define->val(defval);
         deffunctable->insert(define);
         finishdef();
         /* printdef(); */
         scanstring( deff->val() );
         deff = NULL;
         BEGIN(INITIAL);
      }else{
         /*error*/ yyterminate();
      }
   }else{
      appenddefval(yytext);
   }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 199 "src/scanner/lexc11.l"
{ }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 200 "src/scanner/lexc11.l"
{ BEGIN(MACROERRORSTRING); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 201 "src/scanner/lexc11.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 202 "src/scanner/lexc11.l"
{ /*error*/ yyterminate(); }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 204 "src/scanner/lexc11.l"
{ fprintf(stderr, "%s\n", yytext); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 205 "src/scanner/lexc11.l"
{ BEGIN(MACROERROR); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 207 "src/scanner/lexc11.l"
{ comment(); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 208 "src/scanner/lexc11.l"
{ /* consume //-comment */ }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 210 "src/scanner/lexc11.l"
{ count(); return(AUTO); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 211 "src/scanner/lexc11.l"
{ count(); return(BREAK); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 212 "src/scanner/lexc11.l"
{ count(); return(CASE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 213 "src/scanner/lexc11.l"
{ count(); return(CHAR); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 214 "src/scanner/lexc11.l"
{ count(); return(CONST); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 215 "src/scanner/lexc11.l"
{ count(); return(CONTINUE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 216 "src/scanner/lexc11.l"
{ count(); return(DEFAULT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 217 "src/scanner/lexc11.l"
{ count(); return(DO); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 218 "src/scanner/lexc11.l"
{ count(); return(DOUBLE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 219 "src/scanner/lexc11.l"
{ count(); return(ELSE); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 220 "src/scanner/lexc11.l"
{ count(); return(ENUM); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 221 "src/scanner/lexc11.l"
{ count(); return(EXTERN); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 222 "src/scanner/lexc11.l"
{ count(); return(FLOAT); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 223 "src/scanner/lexc11.l"
{ count(); return(FOR); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 224 "src/scanner/lexc11.l"
{ count(); return(GOTO); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 225 "src/scanner/lexc11.l"
{ count(); return(IF); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 226 "src/scanner/lexc11.l"
{ count(); return(INLINE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 227 "src/scanner/lexc11.l"
{ count(); return(INT); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 228 "src/scanner/lexc11.l"
{ count(); return(LONG); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 229 "src/scanner/lexc11.l"
{ count(); return(REGISTER); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 230 "src/scanner/lexc11.l"
{ count(); return(RESTRICT); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 231 "src/scanner/lexc11.l"
{ count(); return(RETURN); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 232 "src/scanner/lexc11.l"
{ count(); return(SHORT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 233 "src/scanner/lexc11.l"
{ count(); return(SIGNED); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 234 "src/scanner/lexc11.l"
{ count(); return(SIZEOF); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 235 "src/scanner/lexc11.l"
{ count(); return(STATIC); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 236 "src/scanner/lexc11.l"
{ count(); return(STRUCT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 237 "src/scanner/lexc11.l"
{ count(); return(SWITCH); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 238 "src/scanner/lexc11.l"
{ count(); return(TYPEDEF); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 239 "src/scanner/lexc11.l"
{ count(); return(UNION); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 240 "src/scanner/lexc11.l"
{ count(); return(UNSIGNED); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 241 "src/scanner/lexc11.l"
{ count(); return(VOID); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 242 "src/scanner/lexc11.l"
{ count(); return(VOLATILE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 243 "src/scanner/lexc11.l"
{ count(); return(WHILE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 244 "src/scanner/lexc11.l"
{ count(); return ALIGNAS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 245 "src/scanner/lexc11.l"
{ count(); return ALIGNOF; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 246 "src/scanner/lexc11.l"
{ count(); return ATOMIC; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 247 "src/scanner/lexc11.l"
{ count(); return BOOL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 248 "src/scanner/lexc11.l"
{ count(); return COMPLEX; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 249 "src/scanner/lexc11.l"
{ count(); return GENERIC; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 250 "src/scanner/lexc11.l"
{ count(); return IMAGINARY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 251 "src/scanner/lexc11.l"
{ count(); return NORETURN; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 252 "src/scanner/lexc11.l"
{ count(); return STATIC_ASSERT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 253 "src/scanner/lexc11.l"
{ count(); return THREAD_LOCAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 254 "src/scanner/lexc11.l"
{ count(); return FUNC_NAME; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 256 "src/scanner/lexc11.l"
{ count(); if(!check_def()) { yylval.lexeme = lexeme(); return check_type(); } }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 258 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return I_CONSTANT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 259 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return I_CONSTANT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 260 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return I_CONSTANT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 261 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return I_CONSTANT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 263 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return F_CONSTANT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 264 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return F_CONSTANT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 265 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return F_CONSTANT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 266 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return F_CONSTANT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 267 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return F_CONSTANT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 268 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return F_CONSTANT; }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 270 "src/scanner/lexc11.l"
{ count(); yylval.lexeme = lexeme(); return STRING_LITERAL; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 272 "src/scanner/lexc11.l"
{ count(); return ELLIPSIS; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 273 "src/scanner/lexc11.l"
{ count(); return RIGHT_ASSIGN; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 274 "src/scanner/lexc11.l"
{ count(); return LEFT_ASSIGN; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 275 "src/scanner/lexc11.l"
{ count(); return ADD_ASSIGN; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 276 "src/scanner/lexc11.l"
{ count(); return SUB_ASSIGN; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 277 "src/scanner/lexc11.l"
{ count(); return MUL_ASSIGN; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 278 "src/scanner/lexc11.l"
{ count(); return DIV_ASSIGN; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 279 "src/scanner/lexc11.l"
{ count(); return MOD_ASSIGN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 280 "src/scanner/lexc11.l"
{ count(); return AND_ASSIGN; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 281 "src/scanner/lexc11.l"
{ count(); return XOR_ASSIGN; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 282 "src/scanner/lexc11.l"
{ count(); return OR_ASSIGN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 283 "src/scanner/lexc11.l"
{ count(); return RIGHT_OP; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 284 "src/scanner/lexc11.l"
{ count(); return LEFT_OP; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 285 "src/scanner/lexc11.l"
{ count(); return INC_OP; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 286 "src/scanner/lexc11.l"
{ count(); return DEC_OP; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 287 "src/scanner/lexc11.l"
{ count(); return PTR_OP; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 288 "src/scanner/lexc11.l"
{ count(); return AND_OP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 289 "src/scanner/lexc11.l"
{ count(); return OR_OP; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 290 "src/scanner/lexc11.l"
{ count(); return LE_OP; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 291 "src/scanner/lexc11.l"
{ count(); return GE_OP; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 292 "src/scanner/lexc11.l"
{ count(); return EQ_OP; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 293 "src/scanner/lexc11.l"
{ count(); return NE_OP; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 294 "src/scanner/lexc11.l"
{ count(); return ';'; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 295 "src/scanner/lexc11.l"
{ count(); return '{'; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 296 "src/scanner/lexc11.l"
{ count(); return '}'; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 297 "src/scanner/lexc11.l"
{ count(); return ','; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 298 "src/scanner/lexc11.l"
{ count(); return ':'; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 299 "src/scanner/lexc11.l"
{ count(); return '='; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 300 "src/scanner/lexc11.l"
{ count(); return '('; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 301 "src/scanner/lexc11.l"
{ count(); return ')'; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 302 "src/scanner/lexc11.l"
{ count(); return '['; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 303 "src/scanner/lexc11.l"
{ count(); return ']'; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 304 "src/scanner/lexc11.l"
{ count(); return '.'; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 305 "src/scanner/lexc11.l"
{ count(); return '&'; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 306 "src/scanner/lexc11.l"
{ count(); return '!'; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 307 "src/scanner/lexc11.l"
{ count(); return '~'; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 308 "src/scanner/lexc11.l"
{ count(); return '-'; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 309 "src/scanner/lexc11.l"
{ count(); return '+'; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 310 "src/scanner/lexc11.l"
{ count(); return '*'; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 311 "src/scanner/lexc11.l"
{ count(); return '/'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 312 "src/scanner/lexc11.l"
{ count(); return '%'; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 313 "src/scanner/lexc11.l"
{ count(); return '<'; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 314 "src/scanner/lexc11.l"
{ count(); return '>'; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 315 "src/scanner/lexc11.l"
{ count(); return '^'; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 316 "src/scanner/lexc11.l"
{ count(); return '|'; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 317 "src/scanner/lexc11.l"
{ count(); return '?'; }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 319 "src/scanner/lexc11.l"
{ count(); /* whitespace separates tokens */ }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IFILE):
case YY_STATE_EOF(MACRO):
case YY_STATE_EOF(DEFINE):
case YY_STATE_EOF(DEFVAR):
case YY_STATE_EOF(DEFVARVAL):
case YY_STATE_EOF(DEFFUNC):
case YY_STATE_EOF(DEFFUNCPARAM):
case YY_STATE_EOF(ACTPARAMDEFFUNC):
case YY_STATE_EOF(MACROIF):
case YY_STATE_EOF(MACROIFDEF):
case YY_STATE_EOF(MACROIFNDEF):
case YY_STATE_EOF(MACROERROR):
case YY_STATE_EOF(MACROERRORSTRING):
#line 321 "src/scanner/lexc11.l"
{ if ( !popfile() ) { yyterminate(); if(deffunctable){ delete deffunctable; deff = NULL; deffunctable = NULL; } } }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 322 "src/scanner/lexc11.l"
{ count(); yyerror("lexical error"); /* discard bad characters */ }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 325 "src/scanner/lexc11.l"
ECHO;
	YY_BREAK
#line 2286 "src/scanner/lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 540 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 540 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 539);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 325 "src/scanner/lexc11.l"



//int yywrap(void)        /* called at end of input */
//{
//    return 1;           /* terminate now */
//}

static void comment(void)
{
    int c;

    while ((c = yyinput()) != 0)
        if (c == '*')
        {
            while ((c = yyinput()) == '*')
                ;

            if (c == '/')
                return;

            if (c == 0)
                break;
        }
    yyerror("unterminated comment");
}

static int check_type(void)
{
    switch (sym_type(yytext))
    {
    case TYPEDEF_NAME:                /* previously defined */
        return TYPEDEF_NAME;
    case ENUMERATION_CONSTANT:        /* previously defined */
        return ENUMERATION_CONSTANT;
    default:                          /* includes undefined */
        return IDENTIFIER;
    }
}


int column = 0;
string line = "";

void count()
{
	int i;

   line.append(yytext);
   
	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n'){
		   line = "";
		   line.append(yytext+i+1);
			column = 0;
		}else if (yytext[i] == '\t')
			column += 8 - (column % 8);
		else
			column++;
   
	//ECHO;
}

char *lexeme()
{
   char * lexeme = new char[yyleng + 1];
   strcpy(lexeme, yytext);   
   return lexeme;
   //return yytext;
}

int check_def()
{
   def *d;
   if(curbs->deffunctable){
      d = curbs->deffunctable->get(yytext);
      if( d ) {
         scanstring( d->val() );
         return 1;
      }
   }
   
   d = deftable.get(yytext);
   if( d ) {
      if(d->type()==DEFFUNC_TYPE) {
	 deff = (deffunc*)d;
         deffunctable = new deftab();
         BEGIN(ACTDEFFUNC);
         return 1;
      }else {
         scanstring( d->val() );
         return 1;
      }
   }else return 0;
}

int newfile(char *fn)
{
   FILE *f = fopen( fn, "r" );
   struct bufstack *bs = (struct bufstack *)malloc(sizeof(struct bufstack));
   char *path;
   //die if no file or no room
   if(!f) { return 0; }
   if(!bs) { exit(1); }

   //remember state
   if(curbs){ 
      curbs->lineno = yylineno;
      if(curbs->path){
         //path = new 
      }
   }
   bs->prev = curbs;
   
   //set up current entry
   bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
   bs->f = f;
   bs->deffunctable = NULL;
   bs->filename = fn;
   yy_switch_to_buffer(bs->bs);
   curbs = bs; 
   yylineno = 1;
   curfilename = fn;
   return 1;
}

int popfile(void)
{
   struct bufstack *bs = curbs;
   struct bufstack *prevbs;
   
   if(!bs) return 0;
   
   //get rid of current entry
   if(bs->f) fclose(bs->f);
   yy_delete_buffer(bs->bs);

   if(bs->deffunctable) delete bs->deffunctable;
   //switch back to previous
   prevbs = bs->prev;
   free(bs);
   
   if(!prevbs) return 0;
   
   yy_switch_to_buffer(prevbs->bs);
   curbs = prevbs;
   yylineno = curbs->lineno;
   curfilename = curbs->filename;
   return 1;
}

int scanstring(const char *str)
{
   //FILE *f = fopen( fn, "r" );
   struct bufstack *bs = (struct bufstack *)malloc(sizeof(struct bufstack));
   
   //die if no room
   if(!bs) { exit(1); }
   
   if(deffunctable){
      bs->deffunctable = deffunctable;
      deff = NULL;
      deffunctable = NULL;
   }else {
      bs->deffunctable = NULL;
   }

   //remember state
   if(curbs)curbs->lineno = yylineno;
   bs->prev = curbs;
   
   //set up current entry
   bs->bs = yy_scan_string(str);//yy_create_buffer(f,YY_BUF_SIZE);
   bs->f = NULL;
   bs->filename = NULL;
   yy_switch_to_buffer(bs->bs);
   curbs = bs; 
   curfilename = NULL;

   //BEGIN(INITIAL);

   return 1;

}

